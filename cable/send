#!/bin/sh -e

# Setup environment with needed environment vars
. "${0%"${0##*/}"}"suprofile


# Creates ${queuedir}/<msgid>{username,hostname,message,send.req}
queuedir=${CABLE_QUEUES}/queue

msgidbytes=20
emailregex="${CABLE_REGEX}"

# Temporary directory on same filesystem
tmpdir=`mktemp -d --tmpdir=${queuedir}`

cleanup() {
    rm -r ${tmpdir}
}

trap 'st=$?; set +e; cleanup; exit ${st}' 0
trap : INT QUIT TERM SEGV


error() {
    # don't log via syslog, since invocation is interactive
    echo "send: $@" 1>&2
    exit 1
}


# Read the message on stdin, and remove X-*: headers
formail -fz -I X- > ${tmpdir}/message


# Prepare headers for local MUA confirmation message
formail -f -X From: -X To: -X Cc: -X Bcc: -X Subject: -X Date:       \
        -X Message-ID: -X In-Reply-To: -X References: -a 'Subject: ' \
    < ${tmpdir}/message | sed 's/^Subject: /&[vfy] /i'               \
    > ${tmpdir}/message.hdr


# Extract bare x@y addresses
addresses=`formail -fcz -x To: -x Cc: -x Bcc: < ${tmpdir}/message \
    | tr , '\n'                                                   \
    | sed 's/^.*<\([^>]*\)>/\1/'                                  \
    | sed 's/^[[:blank:]]\+//; s/[[:blank:]]\+$//'                \
    | tr '[:upper:]' '[:lower:]'`
addresses=`echo ${addresses} | tr '[:blank:]' '\n' | sort -u`

# Extract the bare From: address
fromaddr=`formail -fcz -x From:               < ${tmpdir}/message \
    | sed 's/^.*<\([^>]*\)>/\1/'                                  \
    | tr '[:upper:]' '[:lower:]'`


# Check address validity to prevent accidental information leaks
for addr in "${fromaddr}" ${addresses}; do
    if ! echo x "${addr}" | egrep -q "^x ${emailregex}$"; then
        error "unsupported address: ${addr}"
    fi
done


# Extract the from-user and from-host
echo ${fromaddr%@*} > ${tmpdir}/susername
echo ${fromaddr#*@} > ${tmpdir}/shostname


# Remove Bcc: header and replace Date: with a UTC one:
date=`date -uR`
formail -f -I Bcc: -I "Date: ${date}" < ${tmpdir}/message \
    | gzip -c9n > ${tmpdir}/message.gz
mv ${tmpdir}/message.gz ${tmpdir}/message


# Create actual <msgid> directories, one per addressee
for addr in ${addresses}; do
    # generate <msgid> and create as subdirectory
    msgid=`openssl rand -hex ${msgidbytes}`
    [ ${#msgid} = $((msgidbytes * 2)) ] || error "could not generate msgid"

    mkdir ${tmpdir}/${msgid}

    # extract username and hostname from address, and generate respective files
    echo ${addr%@*} > ${tmpdir}/${msgid}/username
    echo ${addr#*@} > ${tmpdir}/${msgid}/hostname

    # copy the sanitized message (assume the files will not be modified later)
    ln ${tmpdir}/message ${tmpdir}/message.hdr \
       ${tmpdir}/susername ${tmpdir}/shostname \
       ${tmpdir}/${msgid}/

    # atomically move directory to queue dir, and create send.req indicator
    touch ${tmpdir}/${msgid}/send.req
    mv -T ${tmpdir}/${msgid} ${queuedir}/${msgid}
done
