#!/bin/sh -e

if [ $# != 2 ]; then
    echo "Format: $0 send|recv <msgid>"
    exit 1
fi


# Directories
queue=${CABLE_QUEUES}/queue
rqueue=${CABLE_QUEUES}/rqueue

# Parameters
cmd="$1"
msgid="$2"


trap '[ $? = 0 ] || error failed' 0
error() {
    logger -t fetch -p mail.err "$@ (${msgid})"
    trap - 0
    exit 1
}


urlprefix() {
    local username=`cat $1/"${msgid}"/username | tr -cd a-z2-7`
    local hostname=`cat $1/"${msgid}"/hostname | tr -cd '[:alnum:].-' | tr '[:upper:]' '[:lower:]'`
    check_userhost "${username}" "${hostname}"

    echo http://"${hostname}"/"${username}"
}


# Sanity checks
[ ${#msgid} = 40 ] || error "bad msgid"

check_userhost() {
    [ ${#1} = 32 ] || error "bad username"
    [ ${#2} != 0 ] || error "bad hostname"
}


case "${cmd}" in
send)
    # <send> [fetch loop]
    if [ -e ${queue}/"${msgid}"/${cmd}.req ]; then
        prefix=`urlprefix ${queue}`

        # A multi-URI curl command doesn't fail on a bad early fetch
        curl -sSfg -o ${queue}/"${msgid}"/ca.pem     "${prefix}"/certs/ca.pem
        curl -sSfg -o ${queue}/"${msgid}"/verify.pem "${prefix}"/certs/verify.pem
        curl -sSfg -o ${queue}/"${msgid}"/peer.sig   "${prefix}"/certs/peer.sig

        mv ${queue}/"${msgid}"/${cmd}.req ${queue}/"${msgid}"/${cmd}.rdy
    else
        error "${cmd}.req not found"
    fi
    ;;

recv)
    # <recv> [fetch loop]
    if [ -e ${rqueue}/"${msgid}"/${cmd}.req ]; then
        prefix=`urlprefix ${rqueue}`

        # A multi-URI curl command deosn't fail on a bad early fetch
        curl -sSfg -o ${rqueue}/"${msgid}"/message.enc "${prefix}"/queue/"${msgid}"
        curl -sSfg -o ${rqueue}/"${msgid}"/peereph.sig "${prefix}"/queue/"${msgid}".key
        curl -sSfg -o ${rqueue}/"${msgid}"/ca.pem      "${prefix}"/certs/ca.pem
        curl -sSfg -o ${rqueue}/"${msgid}"/verify.pem  "${prefix}"/certs/verify.pem

        mv ${rqueue}/"${msgid}"/${cmd}.req ${rqueue}/"${msgid}"/${cmd}.rdy
    else
        error "${cmd}.req not found"
    fi
    ;;

*)
    error "unknown command"
    ;;
esac
