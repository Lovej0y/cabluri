#!/bin/sh -e

# This command can be run via "sudo -u anon"
. "${0%"${0##*/}"}"suprofile


# NOTE: PSS signatures support in certificates
# is not yet released for OpenSSL

base32=hex2base32

sslconf="${CABLE_HOME}"extensions.cnf
certdir=${CABLE_CERTS}/certs
keysdir=${CABLE_CERTS}/private

certdirtmp=${certdir}.tmp
keysdirtmp=${keysdir}.tmp

# reqsubj not affected by LC_ALL
rsabits=8192
shabits=512
reqsubj='/O=LIBERTE CABLE/CN=Anonymous'
crtdays=18300


# Fail if CA dir already exists
if [ -e ${certdir}  -a  -e ${keysdir} ]; then
    echo ${certdir} and ${keysdir} already exist
    exit 1
fi


# Create temporary directories (erase previous ones, if exist)
rm -rf ${certdirtmp} ${keysdirtmp} ${certdir} ${keysdir}
mkdir  ${certdirtmp} ${keysdirtmp}


# Generate RSA key + X.509 self-signed root CA certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -newkey rsa:${rsabits} -nodes -keyout ${keysdirtmp}/root.pem    \
            -x509 -days ${crtdays} -sha${shabits} -out ${certdirtmp}/ca.pem \
            -config "${sslconf}" -extensions root


# Save 32-character Base32 username (root CA SHA-1 hash)
fingerprint=`openssl x509 -in ${certdirtmp}/ca.pem -outform der | sha1sum | head -c 40`
[ ${#fingerprint} = 40 ]
${base32} ${fingerprint} > ${certdirtmp}/username


# In absence of lifetime/backup policy and in presence of padding,
# it's fine to use the same key for encryption and authentication
ln -s root.pem ${keysdirtmp}/sign.pem
ln -s root.pem ${keysdirtmp}/decrypt.pem


# Generate X.509 verification certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -key ${keysdirtmp}/sign.pem |        \
openssl x509 -req -days ${crtdays} -sha${shabits} -out ${certdirtmp}/verify.pem \
             -CA ${certdirtmp}/ca.pem -CAkey ${keysdirtmp}/root.pem             \
             -CAcreateserial -CAserial ${certdirtmp}/certs.srl                  \
             -extfile "${sslconf}" -extensions verify 2>/dev/null


# Generate X.509 encryption certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -key ${keysdirtmp}/decrypt.pem |     \
openssl x509 -req -days ${crtdays} -sha${shabits} -out ${certdirtmp}/encrypt.pem \
             -CA ${certdirtmp}/ca.pem -CAkey ${keysdirtmp}/root.pem              \
             -CAserial ${certdirtmp}/certs.srl                                   \
             -extfile "${sslconf}" -extensions encrypt 2>/dev/null


# Sanity checks
checks=`
openssl verify -x509_strict -check_ss_sig -policy_check -purpose crlsign      \
              -CAfile ${certdirtmp}/ca.pem -CApath /dev/null ${certdirtmp}/ca.pem
openssl verify -x509_strict -check_ss_sig -policy_check -purpose smimesign    \
              -CAfile ${certdirtmp}/ca.pem -CApath /dev/null ${certdirtmp}/verify.pem
openssl verify -x509_strict -check_ss_sig -policy_check -purpose smimeencrypt \
              -CAfile ${certdirtmp}/ca.pem -CApath /dev/null ${certdirtmp}/encrypt.pem
`

test "${checks}" = "${certdirtmp}/ca.pem: OK
${certdirtmp}/verify.pem: OK
${certdirtmp}/encrypt.pem: OK"


# Commit new directories
chmod 710 ${certdirtmp}   ${keysdirtmp}
chmod 640 ${certdirtmp}/* ${keysdirtmp}/root.pem

mv -T ${certdirtmp} ${certdir}
mv -T ${keysdirtmp} ${keysdir}
