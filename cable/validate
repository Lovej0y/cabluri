#!/bin/sh -e

if [ $# != 2  -o  \( queue != "$1"  -a  rqueue != "$1" \) ]; then
    echo "Format: $0 queue|rqueue <msgid>"
    exit 1
fi


# Helpers
mhdrop=${CABLE_HOME}/mhdrop


# Parameters
qtype=$1
msgid="${2}"

sectmout=$((7 * 24 * 60 * 60))
subjrep='s/^\(Subject: \)\(\[vfy\] \)\?/\1[fail] /i'

# Directories
inbox=${CABLE_INBOX}
msgdir=${CABLE_QUEUES}/${qtype}/"${msgid}"
tsfile="${msgdir}"/username


trap '[ $? = 0 ] || error failed' 0
error() {
    logger -t validate -p mail.err "$@ (${msgid})"
    trap - 0
    exit 1
}


deliver() {
    local dir="$1" msg="$2"
    local grp=`stat -c %g "${dir}"`

    chgrp "${grp}" "${msg}"
    chmod 660      "${msg}"
    "${mhdrop}" "${dir}" "${msg}"
}


# Sanity checks
[ ${#msgid} = 40 ] || error "bad msgid"
[ -s "${tsfile}" ] || error "bad username file"

check_userhost() {
    [ ${#1} = 32 ] || error "bad username"
    [ ${#2} != 0 ] || error "bad hostname"
}


# Determine if the message has timed out
secstart=`stat -c %Y "${tsfile}"`
secend=`date -u +%s`
secdiff=$((secend - secstart))

if [ ${sectmout} -gt ${secdiff} ]; then
    exit
fi


# Variables
date=`date -uR`
username=`cat "${msgdir}"/username | tr -cd a-z2-7`
hostname=`cat "${msgdir}"/hostname | tr -cd '[:alnum:].-' | tr '[:upper:]' '[:lower:]'`
check_userhost "${username}" "${hostname}"


# Classify message state and create an appropriate MUA notification
if [ ${qtype} = queue ]; then
    # message.hdr is available, but [vfy] must be replaced with [fail]
    formail -f -i "Date: ${date}" < "${msgdir}"/message.hdr | sed "${subjrep}"

    if [ -e "${msgdir}"/ack.ok ]; then
        echo "Failed to acknowledge receipt received from ${username}@${hostname}"
    elif [ -e "${msgdir}"/send.ok ]; then
        echo "Failed to send message and receive receipt from ${username}@${hostname}"
    else
        echo "Failed to peer and encrypt message for ${username}@${hostname}"
    fi
else
    if [ -e "${msgdir}"/recv.ok ]; then
        # message.hdr is available
        formail -f -i "Date: ${date}" < "${msgdir}"/message.hdr
        echo "Failed to send receipt and receive acknowledgment from ${username}@${hostname}"
    else
        # no message.hdr is available at this point
        msgdate=$(date -d "$(stat -c %y "${tsfile}")" -uR)
        formail -f -I "From: <${username}@${hostname}>"         \
                   -I "Old-Date: ${msgdate}" -I "Date: ${date}" \
                   -I "Subject: [fail]" <&-

        if [ -e "${msgdir}"/recv.req  -o  -e "${msgdir}"/recv.rdy ]; then
            echo "Failed to fetch and decrypt message from ${username}@${hostname}"
        else
            echo "Failed to generate peer key for message from ${username}@${hostname}"
        fi
    fi
fi > "${msgdir}"/message.rej


# Deliver the reject message
deliver ${inbox} "${msgdir}"/message.rej

# Schedule message directory for removal
mv -T "${msgdir}" "${msgdir}".del

# Indicate unsuccessful status to caller
exit 42
