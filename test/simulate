#!/bin/bash -e

sinfo() {
    echo -e "\033[1;33;41m$@\033[0m"
}

version="LIBERTE CABLE 3.0"

scriptdir="${0%"${0##*/}"}"
cd ${scriptdir:-./}..


root=${PWD}/stage
sinfo "Root dir: ${root}"
rm -rf ${root}


sinfo "Building"
CFLAGS="-O2 -march=core2 -mfpmath=sse -fomit-frame-pointer -pipe -DTESTING" \
LDFLAGS="-Wl,-O1,--as-needed,-z,combreloc" make -s


sinfo "Installing stage1"
make -s PREFIX=${root}/stage1 install


sinfo "Setting stage1 paths for user1"
cat >> ${root}/stage1/etc/cable/profile <<EOF

export CABLE_CERTS=${root}/user1/cable
export CABLE_TOR=${root}/user1/tor
export CABLE_I2P=${root}/user1/i2p
export CABLE_QUEUES=${root}/user1/queues
export CABLE_INBOX=${root}/user1/inbox
export CABLE_PUB=${root}/user1/www

export PATH=${root}/mockup:"\${PATH}"
EOF


sinfo "Installing stage2"
make -s PREFIX=${root}/stage2 install


sinfo "Setting stage2 paths for user2"
cat >> ${root}/stage2/etc/cable/profile <<EOF

export CABLE_CERTS=${root}/user2/cable
export CABLE_TOR=${root}/user2/tor
export CABLE_I2P=${root}/user2/i2p
export CABLE_QUEUES=${root}/user2/queues
export CABLE_INBOX=${root}/user2/inbox
export CABLE_PUB=${root}/user2/www

export PATH=${root}/mockup:"\${PATH}"
EOF


sinfo "Installing mockup scripts"
mkdir ${root}/mockup
cp test/{curl,logger} ${root}/mockup


sinfo "Reducing RSA and DH strength"
sed -i 's/^rsabits=.*/rsabits=1024/' ${root}/stage{1,2}/bin/gen-cable-username
cp test/oakley-group-2.pem           ${root}/stage1/etc/cable/rfc3526-modp-18.pem
cp test/oakley-group-2.pem           ${root}/stage2/etc/cable/rfc3526-modp-18.pem


sinfo "Removing sudo invocations and i/o redirection"
sed -i 's/sudo -n -u cable//' ${root}/stage{1,2}/bin/cable-send
sed -i '/^sleep/d'            ${root}/stage{1,2}/libexec/cable/cabled


sinfo "Creating user paths"
mkdir -p ${root}/user{1,2}/{cable,tor,i2p,queues/{,r}queue,inbox,www/cable/{certs,{,r}queue}}


sinfo "Generating cables, Tor and I2P certificates"
${root}/stage1/bin/gen-cable-username
${root}/stage2/bin/gen-cable-username
${root}/stage1/bin/gen-tor-hostname
${root}/stage2/bin/gen-tor-hostname
${root}/stage1/bin/gen-i2p-hostname
${root}/stage2/bin/gen-i2p-hostname


sinfo "Initializing www directories"
cp ${root}/user1/{cable/certs/*.pem,www/cable/certs}
cp ${root}/user2/{cable/certs/*.pem,www/cable/certs}

mv ${root}/user1/www/{cable,`cat ${root}/user1/cable/certs/username`}
mv ${root}/user2/www/{cable,`cat ${root}/user2/cable/certs/username`}


sinfo "Testing CGI service"
csexec() {
    local req="$1"
    CABLE_QUEUES=${root}/user1/queues PATH_INFO="${req}" ${root}/stage1/libexec/cable/service 2>&1 | sed '/^$\|:/d'
}

mid1=1111111111aaaaaaaaaa9999999999ffffffffff
mid2=0000000000bbbbbbbbbb7777777777eeeeeeeeee
host1=o7te4msv3iexije6.onion
host2=rorhxd3mqkngsj4m4y53jv42tfp2fd4bl4w7jbdeitnxw65wweaa.b32.i2p
user1=25ebhnuidr6sbporsuhm43tig6oj2moo
mac1=13c3fc33754e4266df492a43f8aa72a82e2ef55eb0f20051da98c8c96dfd0cef576e895b9a61211a5ee1b3057999e56db1b6ff39d5502963c0266095e4c62612
mac2=6a799bb1b80087cc23f5955551f2e56c08f69287f87fb59fdb21251d912b8d6be8791f7528f82fe7ab453f432b04ac9859d8524d01740810d87c1c6a19781e97

[ "`csexec ${mac1}${mac1}${mac1}${mac1}/`" = BADREQ ]
for req in "" \
           msg/${mid1//f/F}/${host1}/${user1}  \
           msg/${mid1}/${host1//3/1}/${user1}  \
           msg/${mid1}/${host2//3/8}/${user1}  \
           msg/${mid1}/${host2}/${user1//o/O}  \
           msg/${mid1}/${host1}/${user1}/extra \
           snd/${mid1//f/g}/${mac1}            \
           rcp/${mid1}/${mac1//9/A}            \
           ack/${mid1}/${mac1}0                \
           snd/${mid1}/${mac1}/extra           \
           ver/extra                           \
           ${mac1}${mac1}${mac1}${mac1}
    do  [ "`csexec ${req}`" = BADFMT ]
done

[ "`csexec msg/${mid1}/${host1}/${user1}`" = "${version}" ]
[ -e ${root}/user1/queues/rqueue/${mid1}/peer.req ]

[ "`csexec msg/${mid1}/${host1}/${user1}`" = "${version}" ]
mv ${root}/user1/queues/rqueue/${mid1}{,.new}

[ "`csexec msg/${mid1}/${host2}/${user1}`" = "${version}" ]
[ "`cat ${root}/user1/queues/rqueue/${mid1}/hostname`" = ${host2} ]

[ "`csexec snd/${mid1}/${mac1}`" = ERROR ]
[ ! -e ${root}/user1/queues/rqueue/${mid1}/send.mac ]

touch ${root}/user1/queues/rqueue/${mid1}/peer.ok
[ "`csexec snd/${mid1}/${mac1}`" = "${version}" ]
[ "`cat ${root}/user1/queues/rqueue/${mid1}/send.mac`" = ${mac1} ]
[ ${root}/user1/queues/rqueue/${mid1}/recv.req -ef ${root}/user1/queues/rqueue/${mid1}/peer.ok  ]

[ "`csexec snd/${mid1}/${mac2}`" = "${version}" ]
[ "`cat ${root}/user1/queues/rqueue/${mid1}/send.mac`" = ${mac1} ]

mkdir ${root}/user1/queues/queue/${mid2}
echo ${mac1} > ${root}/user1/queues/queue/${mid2}/recv.mac
[ "`csexec rcp/${mid2}/${mac1}`" = ERROR ]
[ ! -e ${root}/user1/queues/queue/${mid2}/ack.req ]

touch ${root}/user1/queues/queue/${mid2}/send.ok
[ "`csexec rcp/${mid2}/${mac1}`" = "${version}" ]
[ ${root}/user1/queues/queue/${mid2}/ack.req -ef ${root}/user1/queues/queue/${mid2}/send.ok ]

rm ${root}/user1/queues/queue/${mid2}/ack.req
[ "`csexec rcp/${mid2}/${mac2}`" = ERROR ]
[ ! -e ${root}/user1/queues/queue/${mid2}/ack.req ]

rm ${root}/user1/queues/rqueue/${mid1}/*
echo ${mac1} > ${root}/user1/queues/rqueue/${mid1}/ack.mac
[ "`csexec ack/${mid1}/${mac1}`" = ERROR ]
[ -e ${root}/user1/queues/rqueue/${mid1} ]

touch ${root}/user1/queues/rqueue/${mid1}/recv.ok
[ "`csexec ack/${mid1}/${mac1}`" = "${version}" ]
[ -e ${root}/user1/queues/rqueue/${mid1}.del ]

mv -T ${root}/user1/queues/rqueue/${mid1}{.del,}
[ "`csexec ack/${mid1}/${mac2}`" = ERROR ]
[ -e ${root}/user1/queues/rqueue/${mid1} ]

rm -r ${root}/user1/queues/rqueue/${mid1} ${root}/user1/queues/queue/${mid2}


sinfo "Testing cable-id and cable-ping"
for u in 1 2; do
    for tp in user tor i2p; do
        eval u${u}${tp}=`${root}/stage${u}/bin/cable-id ${tp}`
    done
done

for u in 1 2; do
    for tp in tor i2p; do
        eval cpresp=\`${root}/stage1/bin/cable-ping \${u${u}user}@\${u${u}${tp}}\`
        [ "${cpresp}" = "${version}" ]
    done
done


sinfo "Testing synchronous message flow (fetch errors are expected)"
ccsend() {
    local u="$1"
    local desc="$2"
    local from="$3"
    local to1="$4"
    local to2="$5"

    ${root}/stage${u}/bin/cable-send <<EOF
From: Anon Anon <${from}>
To: Anon Anon <${to1}>, Anon Anon <${to2}>
Subject: Test (${desc})

Test
EOF
}

ccsend 1 "Tor1 -> Tor2, I2P2 (loop)" ${u1user}@${u1tor} ${u2user}@${u2tor} ${u2user}@${u2i2p}
ccsend 1 "I2P1 -> Tor2, I2P2 (loop)" ${u1user}@${u1i2p} ${u2user}@${u2tor} ${u2user}@${u2i2p}

ccloop() {
    local u="$1"
    local mid="$2"
    if [ ${u} = 1 ]; then
        local q=queue
    else
        local q=rqueue
    fi

    (
        . ${root}/stage${u}/etc/cable/profile
        ${CABLE_HOME}/loop ${q} ${mid}
    )
}

sed -i 's/\<exit 22\>/exit 222/' ${root}/mockup/curl
mids=`find ${root}/user1/queues/queue -mindepth 1 -maxdepth 1 -printf '%P\n'`
for mid in ${mids}; do
    ccloop 1 ${mid} || :
    ccloop 2 ${mid}
    ccloop 1 ${mid}
    ccloop 2 ${mid}
    ccloop 1 ${mid}
    ccloop 1 ${mid}.del
    ccloop 2 ${mid}.del
done


sinfo "Testing daemon operation"
ccdaemon() {
    local pid1= pid2= chkdir=

    ${root}/stage1/libexec/cable/cabled & pid1=$!
    ${root}/stage2/libexec/cable/cabled & pid2=$!

    for chkdir in user{1,2}/queues; do
        while find ${root}/${chkdir} -mindepth 2 -maxdepth 2 | grep -q .; do
            sleep 2
        done
    done

    kill ${pid1} ${pid2}
    wait ${pid1} ${pid2} || :

    if find ${root} -path '*/www/*queue/*' | grep -q .; then
        echo "www leftovers"
        return 1
    fi
}

ccsend 1 "Tor1 -> Tor2, I2P2 (daemon)" ${u1user}@${u1tor} ${u2user}@${u2tor} ${u2user}@${u2i2p}
ccsend 1 "I2P1 -> Tor2, I2P2 (daemon)" ${u1user}@${u1i2p} ${u2user}@${u2tor} ${u2user}@${u2i2p}
ccsend 2 "Tor2 -> Tor1, I2P1 (daemon)" ${u2user}@${u2tor} ${u1user}@${u1tor} ${u1user}@${u1i2p}
ccsend 2 "I2P2 -> Tor1, I2P1 (daemon)" ${u2user}@${u2i2p} ${u1user}@${u1tor} ${u1user}@${u1i2p}

faketmp=`mktemp -d --tmpdir=${root}/user1/queues/queue`
touch ${faketmp}/test{1,2}
fakemid=${root}/user1/queues/rqueue/012345abcd012345abcd012345abcd012345abcd.new
cp -r ${faketmp} ${fakemid}
touch --date="2 days ago" ${faketmp} ${fakemid}

sed -i 's/\<exit 222\>/exit 22/' ${root}/mockup/curl
ccdaemon

if grep -rq Failed ${root}/user{1,2}/inbox; then
    false
fi


sinfo "Testing message expiration"
ccsend 1 "Tor1 -> Tor1, Tor2 (expire)"       ${u1user}@${u1tor} ${u1user}@${u1tor} ${u2user}@${u2tor}
ccsend 2 "Tor2 -> Tor2, Tor1 (expire)"       ${u2user}@${u2tor} ${u2user}@${u2tor} ${u1user}@${u1tor}
ccsend 2 "Tor1 -> Tor1, Tor2 (expire, fake)" ${u1user}@${u1tor} ${u1user}@${u1tor} ${u2user}@${u2tor}
ccsend 1 "Tor2 -> Tor2, Tor1 (expire, fake)" ${u2user}@${u2tor} ${u2user}@${u2tor} ${u1user}@${u1tor}

echo CABLE_TMOUT=17 >> ${root}/stage1/etc/cable/profile
echo CABLE_TMOUT=17 >> ${root}/stage2/etc/cable/profile
ccdaemon

if ! grep -rq Failed ${root}/user{1,2}/inbox; then
    false
fi


sinfo "Success"
