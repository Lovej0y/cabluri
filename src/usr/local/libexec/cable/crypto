#!/bin/sh -e

if [ $# != 2 ]; then
    echo "Format: $0 send|recv|ack <msgid>"
    exit 1
fi


# Helpers
cms="${CABLE_HOME}"cms
mhdrop="${CABLE_HOME}"mhdrop


# Directories
inbox=${CABLE_INBOX}
ssldir=${CABLE_CERTS}
queue=${CABLE_QUEUES}/queue
rqueue=${CABLE_QUEUES}/rqueue

# Parameters
cmd="$1"
msgid="$2"


trap '[ $? = 0 ] || error failed' 0
error() {
    logger -t crypto -p mail.err "$@ (${msgid})"
    exit 1
}


getuserhost() {
    username=`cat $1/"${msgid}"/username | tr -cd a-z2-7`
    hostname=`cat $1/"${msgid}"/hostname | tr -cd '[:alnum:].-' | tr '[:upper:]' '[:lower:]'`
    check_userhost "${username}" "${hostname}"
}


deliver() {
    local dir="$1" msg="$2"
    local grp=`stat -c %g "${dir}"`

    chgrp "${grp}" "${msg}"
    chmod 660      "${msg}"
    "${mhdrop}" "${dir}" "${msg}"
}


# Sanity checks
[ ${#msgid} = 40 ] || error "bad msgid"

check_userhost() {
    [ ${#1} = 32 ] || error "bad username"
    [ ${#2} != 0 ] || error "bad hostname"
}


case "${cmd}" in
send)
    # <send> [crypto loop]
    if [ -e ${queue}/"${msgid}"/${cmd}.rdy ]; then
        if "${cms}" ${cmd} ${ssldir} ${queue}/"${msgid}" 2>/dev/null; then
            mv ${queue}/"${msgid}"/${cmd}.rdy ${queue}/"${msgid}"/${cmd}.ok
            rm ${queue}/"${msgid}"/message
        else
            mv ${queue}/"${msgid}"/${cmd}.rdy ${queue}/"${msgid}"/${cmd}.req
            error "${cmd} failed"
        fi
    else
        error "${cmd}.rdy not found"
    fi
    ;;

recv)
    # <recv> [crypto loop]
    if [ -e ${rqueue}/"${msgid}"/${cmd}.rdy ]; then
        if "${cms}" ${cmd} ${ssldir} ${rqueue}/"${msgid}" 2>/dev/null; then
            getuserhost ${rqueue}
            date=`date -uR`

            /bin/gzip -cd ${rqueue}/"${msgid}"/message            \
                | formail -z -I 'From '                           \
                             -i "From: <${username}@${hostname}>" \
                             -I "X-Received-Date: ${date}"        \
                > ${rqueue}/"${msgid}"/message.ibx

            # Prepare headers for local MUA failure message
            formail -f -X From: -X To: -X Cc: -X Bcc: -X Subject: -X Date:         \
                    -X Message-ID: -X In-Reply-To: -X References: -a 'Subject: '   \
                < ${rqueue}/"${msgid}"/message.ibx | sed 's/^Subject: /&[fail] /i' \
                > ${rqueue}/"${msgid}"/message.hdr

            deliver ${inbox} ${rqueue}/"${msgid}"/message.ibx

            mv ${rqueue}/"${msgid}"/${cmd}.rdy ${rqueue}/"${msgid}"/${cmd}.ok
            rm ${rqueue}/"${msgid}"/message    ${rqueue}/"${msgid}"/message.out
        else
            mv ${rqueue}/"${msgid}"/${cmd}.rdy ${rqueue}/"${msgid}"/${cmd}.req
            error "${cmd} failed"
        fi
    else
        error "${cmd}.rdy not found"
    fi
    ;;

ack)
    # <ack> [crypto loop]
    if [ -e ${queue}/"${msgid}"/${cmd}.rdy ]; then
        if "${cms}" ${cmd} ${ssldir} ${queue}/"${msgid}" 2>/dev/null; then
            getuserhost ${queue}
            date=`date -uR`

            (formail -f -i "Date: ${date}" < ${queue}/"${msgid}"/message.hdr;   \
                echo "Verified message delivery to\n  ${username}@${hostname}") \
                > ${queue}/"${msgid}"/message.ack

            deliver ${inbox} ${queue}/"${msgid}"/message.ack

            mv ${queue}/"${msgid}"/${cmd}.rdy  ${queue}/"${msgid}"/${cmd}.ok
            rm ${queue}/"${msgid}"/message.out ${queue}/"${msgid}"/receipt.out \
               ${queue}/"${msgid}"/message.sig
        else
            mv ${queue}/"${msgid}"/${cmd}.rdy ${queue}/"${msgid}"/${cmd}.req
            error "${cmd} failed"
        fi
    else
        error "${cmd}.rdy not found"
    fi
    ;;

*)
    error "unknown command"
    ;;
esac
