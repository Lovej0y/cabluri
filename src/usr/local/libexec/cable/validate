#!/bin/sh -e

umask 077
export LC_ALL=C


if [ $# != 2  -o  \( queue != "$1"  -a  rqueue != "$1" \) ]; then
    echo "Format: $0 queue|rqueue <msgid>"
    exit 1
fi


# Helpers
prefix="${0##*/}"
prefix="${0%${prefix}}"
mhdrop="${prefix}"mhdrop


# Parameters
qtype=$1
msgid="${2}"

sectmout=$((7 * 24 * 60 * 60))
subjrep='s/^\(Subject: \)\(\[vfy\] \)\?/\1[fail] /i'

# Directories
msgdir=${HOME}/persist/cables/${qtype}/"${msgid}"
tsfile="${msgdir}"/username


error() {
    echo "validate: $1" 1>&2
    exit 1
}


# Sanity checks
[ ${#msgid} = 40 ] || error "bad msgid"
[ -s ${tsfile} ]   || error "bad username file"

check_userhost() {
    [ ${#1} = 32 ] || error "bad username"
    [ ${#2} != 0 ] || error "bad hostname"
}


# Determine if the message has timed out
secstart=`stat --printf=%Y ${tsfile}`
secend=`date -u +%s`
secdiff=$((secend - secstart))

if [ ${sectmout} -gt ${secdiff} ]; then
    exit
fi


# Variables
date=`date -uR`
username=`cat "${msgdir}"/username | tr -cd a-z2-7`
hostname=`cat "${msgdir}"/hostname | tr -cd '[:alnum:].-' | tr '[:upper:]' '[:lower:]'`
check_userhost "${username}" "${hostname}"


# Classify message state and create an appropriate MUA notification
if [ ${qtype} = queue ]; then

    # message.hdr is available, but [vfy] must be replaced with [fail]
    sed "${subjrep}" "${msgdir}"/message.hdr > "${msgdir}"/message.rej

    if [ -e "${msgdir}"/send.req  -o  -e "${msgdir}"/send.rdy ]; then
        echo "\nFailed to fetch certificates and encrypt message for ${username}@${hostname}.\n${date}" \
            >> "${msgdir}"/message.rej
    elif [ -e "${msgdir}"/send.ok ]; then
        if [ ! -e "${msgdir}"/ack.ok ]; then
            echo "\nFailed to send message and receive receipt from ${username}@${hostname}.\n${date}" \
                >> "${msgdir}"/message.rej
        else
            echo "\nFailed to acknowledge receipt received from ${username}@${hostname}.\n${date}" \
                >> "${msgdir}"/message.rej
        fi
    else
        error "${msgid}: inconsistent state"
    fi

else

    if [ -e "${msgdir}"/recv.req  -o  -e "${msgdir}"/recv.rdy ]; then
        # no message.hdr is available at this point
        msgdate=$(date -d "$(stat --printf=%y "${tsfile}")" -uR)

        echo "From: ${username}@${hostname}\nDate: ${msgdate}\nSubject: [fail]\n\nFailed to fetch and decrypt message from ${username}@${hostname}.\n${date}" \
            > "${msgdir}"/message.rej
    elif [ -e "${msgdir}"/recv.ok ]; then
        # message.hdr is available
        (cat "${msgdir}"/message.hdr; \
            echo "\nFailed to send receipt and receive acknowledgment from ${username}@${hostname}.\n${date}") \
            > "${msgdir}"/message.rej
    else
        error "${msgid}: inconsistent state"
    fi

fi


# Deliver the reject message
"${mhdrop}" "${msgdir}"/message.rej

# Schedule message directory for removal
mv -T "${msgdir}" "${msgdir}".del

# Indicate unsuccessful status to caller
exit 42
