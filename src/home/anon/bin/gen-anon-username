#!/bin/sh -e

umask 077

# NOTE: PSS signatures support in certificates
# is not yet released for OpenSSL

# This command can be run via "sudo -u anon"
# Available environment: HOME, USER

ssldir=${HOME}/persist/security/ssl
base32=hex2base32

sslconf=${HOME}/config/ssl/extensions.cnf
certdir=${ssldir}/certs
keysdir=${ssldir}/private

rsabits=8192
shabits=512
reqsubj='/O=LibertÃ© Linux/CN=Anonymous'
crtdays=18300

# Rely on pam_mktemp
export RANDFILE=/tmp/.private/${USER}/openssl.rnd


# Intentionally fail if CA dir already exists
mkdir ${certdir} ${keysdir}


# Key generation can be lengthy, set some traps
trap 'if [ $? != 0 ]; then rm -r ${certdir} ${keysdir}; fi' 0
trap : INT QUIT TERM SEGV


# Generate RSA key + X.509 self-signed root CA certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -newkey rsa:${rsabits} -nodes -keyout ${keysdir}/root.pem    \
            -x509 -days ${crtdays} -sha${shabits} -out ${certdir}/ca.pem \
            -config ${sslconf} -extensions root


# Save 32-character Base32 username (root CA SHA-1 hash)
fingerprint=`openssl x509 -in ${certdir}/ca.pem -outform der | sha1sum | head -c 40`
[ ${#fingerprint} = 40 ]
${base32} ${fingerprint} > ${certdir}/username


# In absence of lifetime/backup policy and in presence of padding,
# it's fine to use the same key for encryption and authentication
ln -s root.pem ${keysdir}/sign.pem
ln -s root.pem ${keysdir}/decrypt.pem


# Generate X.509 verification certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -key ${keysdir}/sign.pem |           \
openssl x509 -req -days ${crtdays} -sha${shabits} -out ${certdir}/verify.pem  \
             -CA ${certdir}/ca.pem -CAkey ${keysdir}/root.pem -CAcreateserial \
             -extfile ${sslconf} -extensions verify 2>/dev/null


# Generate X.509 encryption certificate
openssl req -batch -new -utf8 -subj "${reqsubj}" \
            -key ${keysdir}/decrypt.pem |        \
openssl x509 -req -days ${crtdays} -sha${shabits} -out ${certdir}/encrypt.pem \
             -CA ${certdir}/ca.pem -CAkey ${keysdir}/root.pem                 \
             -extfile ${sslconf} -extensions encrypt 2>/dev/null


# Sanity checks
checks=`
openssl verify -x509_strict -check_ss_sig -policy_check -purpose crlsign      \
              -CAfile ${certdir}/ca.pem -CApath /dev/null ${certdir}/ca.pem
openssl verify -x509_strict -check_ss_sig -policy_check -purpose smimesign    \
              -CAfile ${certdir}/ca.pem -CApath /dev/null ${certdir}/verify.pem
openssl verify -x509_strict -check_ss_sig -policy_check -purpose smimeencrypt \
              -CAfile ${certdir}/ca.pem -CApath /dev/null ${certdir}/encrypt.pem
`

test "${checks}" = "${certdir}/ca.pem: OK
${certdir}/verify.pem: OK
${certdir}/encrypt.pem: OK"
